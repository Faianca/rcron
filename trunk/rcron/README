
rcron is a minimal tool to ensure cron jobs redundancy and failover
over groups of machines.

The principle is: cron jobs needing redundancy are launched by rcron (just
prefix "rcron" to the job command line in crontab for this). When launched,
rcron will look the content of a state file, which should be "active" (then
rcron will actually run the command) or "passive" (then rcron will return
immediatly).

rcron doesn't guess the machines state (active/passive, aka master/slave) by
itself, but rely on external tools like keepalived or heartbeat or wackamole
to do this for him and to update his state file. It doesn't synchronize 
crontabs by itself (do it manually for the jobs need high availability). 
And it doesn't synchronize any data or code needed to run the jobs amon
servers (this can be done independantly with NFS, SMB, Csync2, etc.).

The usage is very simple:
# Install rcron on a group of servers sharing a common group of jobs (the "cluster").
# Write a rcron configuration file on each server. For instance :
  * /etc/rcron/rcron.conf on server1:
    # An arbitrary name (but common for a cluster)
    cluster_name 	= myredundant_jobs
    # A file containing either the word "active" or "passive"
    state_file 		= /var/run/rcron/state
    # The default state in case state_file can't be read
    default_state 	= active
    syslog_facility 	= LOG_CRON
    syslog_level 	= LOG_INFO
    nice_level 		= 19
  * /etc/rcron/rcron.conf on server1:
    cluster_name 	= myredundant_jobs
    state_file 		= /var/run/rcron/state
    default_state 	= passive
    syslog_facility 	= LOG_CRON
    syslog_level 	= LOG_INFO
    nice_level 		= 19
# On all cluster servers, and for all cron jobs you want redundant, prefix job
  definition with rcron in crontabs. For instance:
  12 11 * * * /usr/bin/rcron myjob
# Configure an external tool like keepalive, heartbeat or wackamole to
  maintain the configured state_file up to date: on the master server, this
  file must contain "active", on slaves servers, "passive".

